<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sipc.mmtbackend.mapper.customization.MyInterviewStatusMapper">
    <select id="selectByAdmissionId" resultType="com.sipc.mmtbackend.pojo.domain.InterviewStatus">
        select *
        from interview_status
        where admission_id = #{admissionId, jdbcType=INTEGER}
    </select>

    <select id="selectOrganizationOrderCountByAdmissionId" resultType="com.sipc.mmtbackend.pojo.domain.po.GroupIntCountPo">
        select organization_order as id, COUNT(id) as count
        from interview_status
        where admission_id = #{admissionId, jdbcType=INTEGER}
        group by organization_order
        order by organization_order
    </select>

    <select id="selectDepartmentOrderCountByAdmissionId" resultType="com.sipc.mmtbackend.pojo.domain.po.GroupIntCountPo">
        select department_order as id, COUNT(id) as count
        from interview_status
        where admission_id = #{admissionId, jdbcType=INTEGER}
        group by department_order
        order by department_order
    </select>

    <select id="selectDepartmentCountByAdmissionId" resultType="com.sipc.mmtbackend.pojo.domain.po.GroupIntCountPo">
        select department_id as id, COUNT(id) as count
        from interview_status
        where admission_id = #{admissionId, jdbcType=INTEGER}
        group by department_id
        order by department_id
    </select>

    <select id="selectNextTimeCountByAdmissionId" resultType="com.sipc.mmtbackend.pojo.domain.po.GroupLocalTimeCountPo">
        select start_time as id, COUNT(id) as count
        from interview_status
        where admission_id = #{admissionId, jdbcType=INTEGER}
        group by start_time
        order by start_time
    </select>

    <select id="selectAddressCountByAdmissionId" resultType="com.sipc.mmtbackend.pojo.domain.po.GroupIntCountPo">
        select admission_address_id as id, COUNT(id) as count
        from interview_status
        where admission_id = #{admissionId, jdbcType=INTEGER}
        group by admission_address_id
        order by admission_address_id
    </select>
    <select id="selectAllAndUserInfoByAdmissionIdLimit"
            resultType="com.sipc.mmtbackend.pojo.domain.po.MyInterviewStatusPo">
        select its.id, its.user_id, its.admission_address_id, its.start_time, its.end_time, its.state, its.sign_in_time,
               its.organization_order, its.department_order, its.admission_id, its.department_id, its.round,
               ui.student_id, ui.name, ui.major_class_id, ui.phone
        from interview_status as its
        left join user_info as ui on ui.id = its.user_id
        where admission_id = #{admissionId, jdbcType=INTEGER}
        limit #{start, jdbcType=INTEGER}, #{end, jdbcType=INTEGER}
    </select>
    <select id="selectByAdmissionIdAndUserInfo"
            resultType="com.sipc.mmtbackend.pojo.domain.po.MyInterviewStatusPo">
        select its.id, its.user_id, its.admission_address_id, its.start_time, its.end_time, its.state, its.sign_in_time,
               its.organization_order, its.department_order, its.admission_id, its.department_id, its.round,
               ui.student_id, ui.name, ui.major_class_id, ui.phone
        from interview_status as its
        left join user_info as ui on ui.id = its.user_id
        where admission_id = #{admissionId, jdbcType=INTEGER}
    </select>
    <select id="selectByAdmissionIdAndSift" parameterType="com.sipc.mmtbackend.pojo.dto.param.dataDashboard.SiftParam" resultType="com.sipc.mmtbackend.pojo.domain.po.MyInterviewStatusPo">
        select its.id, its.user_id, its.admission_address_id, its.start_time, its.end_time, its.state, its.sign_in_time,
        its.organization_order, its.department_order, its.admission_id, its.department_id, its.round,
        ui.student_id, ui.name, ui.major_class_id, ui.phone
        from interview_status as its
        left join user_info as ui on ui.id = its.user_id
        where admission_id = #{admissionId, jdbcType=INTEGER}
            <if test="siftParam.interviewRoundSift.size() != 0">
                and round in
                    <foreach collection="siftParam.interviewRoundSift" item="item" open="(" separator="," close=")">
                        #{item}
                    </foreach>
            </if>
            <if test="siftParam.interviewStatusSift.size() != 0">
                and state in
                    <foreach collection="siftParam.interviewStatusSift" item="item" open="(" separator="," close=")">
                        #{item}
                    </foreach>
            </if>
            <if test="siftParam.organizationOrderSift.size() != 0">
                and organization_order in
                    <foreach collection="siftParam.organizationOrderSift" item="item" open="(" separator="," close=")">
                        #{item}
                    </foreach>
            </if>
            <if test="siftParam.departmentOrderSift.size() != 0">
                and department_order in
                    <foreach collection="siftParam.departmentOrderSift" item="item" open="(" separator="," close=")">
                        #{item}
                    </foreach>
            </if>
            <if test="siftParam.nowDepartmentSift.size() != 0">
                and department_id in
                    <foreach collection="siftParam.nowDepartmentSift" item="item" open="(" separator="," close=")">
                        #{item}
                    </foreach>
            </if>
            <if test="siftParam.nextTimeSift.size() != 0">
                and ( start_time is null
                          or
                    start_time in
                    <foreach collection="siftParam.nextTimeSift" item="item" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                )
            </if>
            <if test="siftParam.nextPlaceSift.size() != 0">
                and ( admission_address_id is null
                    or
                    admission_address_id in
                    <foreach collection="siftParam.nextPlaceSift" item="item" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                )

            </if>
<!--            <if test="siftParam.search != null">-->
<!--                and ( ui.student_id like concat('%', #{siftParam.search}, '%')-->
<!--                or ui.name like concat('%', #{siftParam.search}, '%')-->
<!--                or ui.phone like concat('%', #{siftParam.search}, '%') )-->
<!--            </if>-->
            <if test="siftParam.sort != null">

                <choose>
                    <when test="siftParam.sort.sortId == 1">
                        ORDER BY ui.name
                        <if test="siftParam.sort.sortBy == 2">DESC</if>
                    </when>
                    <when test="siftParam.sort.sortId == 2">
                        ORDER BY ui.student_id
                        <if test="siftParam.sort.sortBy == 2">DESC</if>
                    </when>
                    <when test="siftParam.sort.sortId == 3">
                        ORDER BY start_time
                        <if test="siftParam.sort.sortBy == 2">DESC</if>
                    </when>
                    <when test="siftParam.sort.sortId == 4">
                        ORDER BY admission_address_id
                        <if test="siftParam.sort.sortBy == 2">DESC</if>
                    </when>

                    <!-- Add more cases for other sorting options -->
                    <!-- ... -->
                </choose>

            </if>
    </select>
    <select id="selectIMByAdmissionIdAndRoundFirst"
            resultType="com.sipc.mmtbackend.pojo.domain.po.InterviewMessagePo">
        select its.id, ui.student_id, ui.name, ui.major_class_id, its.department_id, its.state, its.start_time as next_time,
               its.admission_address_id as next_place_id, m.is_read as message_status
        from interview_status as its
                left join user_info as ui on ui.id = its.user_id
                left join message as m on m.interview_status_id = its.id
        where admission_id = #{admissionId, jdbcType=INTEGER}
            and round = 1
        limit #{start,jdbcType=INTEGER}, #{end,jdbcType=INTEGER}
    </select>
    <select id="selectIMByAdmissionIdAndRound"
            resultType="com.sipc.mmtbackend.pojo.domain.po.InterviewMessagePo">
        select its.id, ui.student_id, ui.name, ui.major_class_id, its.department_id, its.state, its.start_time as next_time,
               its.admission_address_id as next_place_id, m.is_read as message_status
        from interview_status as its
                 left join user_info as ui on ui.id = its.user_id
                 left join message as m on m.interview_status_id = its.id
        where admission_id = #{admissionId, jdbcType=INTEGER}
          and round = #{round,jdbcType=INTEGER}
        limit #{start,jdbcType=INTEGER}, #{end,jdbcType=INTEGER}
    </select>
    <select id="selectDepartmentCountByAdmissionIdAndRound"
            resultType="com.sipc.mmtbackend.pojo.domain.po.GroupIntCountPo">
        select department_id as id, COUNT(id) as count
        from interview_status
        where admission_id = #{admissionId, jdbcType=INTEGER}
            and round = #{round,jdbcType=INTEGER}
        group by department_id
        order by department_id
    </select>
    <select id="selectAddressCountByAdmissionIdAndRound"
            resultType="com.sipc.mmtbackend.pojo.domain.po.GroupIntCountPo">
        select admission_address_id as id, COUNT(id) as count
        from interview_status
        where admission_id = #{admissionId, jdbcType=INTEGER}
            and round = #{round,jdbcType=INTEGER}
        group by admission_address_id
        order by admission_address_id
    </select>
    <select id="selectMessageStateByAdmissionIdAndRound"
            resultType="com.sipc.mmtbackend.pojo.domain.po.GroupIntCountPo">
        select state as id, COUNT(id) as count
        from interview_status
        where admission_id = #{admissionId, jdbcType=INTEGER}
          and round = #{round,jdbcType=INTEGER}
          and state = 2 or 3
        group by state
        order by state
    </select>
    <select id="selectArrangeByAdmissionIdAndSiftAndRoundFirst"
            resultType="com.sipc.mmtbackend.pojo.domain.po.InterviewMessagePo">
        select its.id, ui.student_id, ui.name, ui.major_class_id, its.department_id, its.state, its.start_time as next_time,
        its.admission_address_id as next_place_id, m.is_read as message_status
        from interview_status as its
        left join user_info as ui on ui.id = its.user_id
        left join message as m on m.interview_status_id = its.id
        where admission_id = #{admissionId, jdbcType=INTEGER}
        and round = 1
        <if test="siftParam.departmentIdList.size() != 0">
            and department_id in
            <foreach collection="siftParam.departmentIdList" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="siftParam.admissionAddressList.size() != 0">
            and ( admission_address_id is null
            or
            admission_address_id in
            <foreach collection="siftParam.admissionAddressList" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
            )
        </if>
        <if test="siftParam.messageStatusList.size() != 0">
            <foreach collection="siftParam.messageStatusList" item="item" open="(" separator="," close=")">
                <choose>
                    <when test="#{item == 1}">
                        and its.state not in (2,3)
                    </when>
                    <when test="#{item == 2}">
                        and its.state = 3
                    </when>
                    <when test="#{item == 3}">
                        and its.state = 2
                    </when>
                </choose>
            </foreach>
        </if>
    </select>
    <select id="selectArrangeByAdmissionIdAndSiftAndRound"
            resultType="com.sipc.mmtbackend.pojo.domain.po.InterviewMessagePo">
        select its.id, ui.student_id, ui.name, ui.major_class_id, its.department_id, its.state, its.start_time as next_time,
               its.admission_address_id as next_place_id, m.is_read as message_status
        from interview_status as its
                 left join user_info as ui on ui.id = its.user_id
                 left join message as m on m.interview_status_id = its.id
        where admission_id = #{admissionId, jdbcType=INTEGER}
          and round = #{round,jdbcType=INTEGER}
          <if test="siftParam.departmentIdList.size() != 0">
              and department_id in
              <foreach collection="siftParam.departmentIdList" item="item" open="(" separator="," close=")">
                  #{item}
              </foreach>
          </if>
          <if test="siftParam.admissionAddressList.size() != 0">
              and ( admission_address_id is null
              or
              admission_address_id in
              <foreach collection="siftParam.admissionAddressList" item="item" open="(" separator="," close=")">
                  #{item}
              </foreach>
              )
          </if>
          <if test="siftParam.messageStatusList.size() != 0">
              <foreach collection="siftParam.messageStatusList" item="item" open="(" separator="," close=")">
                  <choose>
                      <when test="#{item == 1}">
                            and its.state not in (2,3)
                      </when>
                      <when test="#{item == 2}">
                            and its.state = 3
                      </when>
                      <when test="#{item == 3}">
                          and its.state = 2
                      </when>
                  </choose>
              </foreach>
          </if>
    </select>
    <select id="selectIRByAdmissionIdAndRoundAndNotTrueTime"
            resultType="com.sipc.mmtbackend.pojo.domain.po.interviewReview.IRInterviewStatusPo">
        select its.id, its.user_id, its.state, ui.student_id, ui.name, ui.major_class_id, its.is_message
        from interview_status as its
                 left join user_info as ui on ui.id = its.user_id
        where admission_id = #{admissionId, jdbcType=INTEGER}
            and round = #{round,jdbcType=INTEGER}
            and true_end_time is not null
    </select>
    <select id="selectIRByAdmissionIdAndRoundAndNotTrueTimeLimit"
            resultType="com.sipc.mmtbackend.pojo.domain.po.interviewReview.IRInterviewStatusPo">
        select its.id, its.user_id, its.state, ui.student_id, ui.name, ui.major_class_id, its.is_message
        from interview_status as its
                 left join user_info as ui on ui.id = its.user_id
        where admission_id = #{admissionId, jdbcType=INTEGER}
          and round = #{round,jdbcType=INTEGER}
          and true_end_time is not null
          limit #{start,jdbcType=INTEGER}, #{end,jdbcType=INTEGER}
    </select>
    <select id="selectIRByAdmissionIdAndRoundAndNotTrueTimeSift"
            resultType="com.sipc.mmtbackend.pojo.domain.po.interviewReview.IRInterviewStatusPo">
        select its.id, its.user_id, its.state, ui.student_id, ui.name, ui.major_class_id, its.is_message
        from interview_status as its
                 left join user_info as ui on ui.id = its.user_id
        where admission_id = #{admissionId, jdbcType=INTEGER}
          and round = #{round,jdbcType=INTEGER}
          and true_end_time is not null
        <if test="siftParam.departmentId != null">
            and department_id = #{siftParam.departmentId}
        </if>
        <if test="siftParam.addressId != null">
            and admission_address_id = #{siftParam.addressId}
        </if>
        <if test="siftParam.stateList.size() != 0">
          and state in
            <foreach collection="siftParam.stateList" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="siftParam.messageStateList.size() != 0">
            and is_message in
            <foreach collection="siftParam.messageStateList" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="siftParam.search != null">
            and (student_id like concat('%', #{siftParam.search}, '%')
                or name like concat('%', #{siftParam.search}, '%') )
        </if>
    </select>
    <select id="selectGroupByAdmissionIdAndRoundAndDAndA"
            resultType="com.sipc.mmtbackend.pojo.domain.po.interviewReview.GroupByNumPo">
        select state as id, count(id) as num
        from interview_status
        where admission_id = #{admissionId, jdbcType=INTEGER}
          and round = #{round,jdbcType=INTEGER}
          and true_end_time is not null
        group by state
    </select>
    <select id="selectGroupDByAdmissionIdAndRoundAndDAndA"
            resultType="com.sipc.mmtbackend.pojo.domain.po.interviewReview.GroupByNumPo">
        select department_id as id, count(id) as num
        from interview_status
        where admission_id = #{admissionId, jdbcType=INTEGER}
          and round = #{round,jdbcType=INTEGER}
          and true_end_time is not null
          and state = 9
          group by department_id
    </select>
    <select id="selectGroupAByAdmissionIdAndRoundAndDAndA"
            resultType="com.sipc.mmtbackend.pojo.domain.po.interviewReview.GroupByNumPo">
        select admission_address_id as id, count(id) as num
        from interview_status
        where admission_id = #{admissionId, jdbcType=INTEGER}
          and round = #{round,jdbcType=INTEGER}
          and true_end_time is not null
          and state = 9
        group by admission_address_id
    </select>
    <select id="selectGroupMessageByAdmissionIdAndRound"
            resultType="com.sipc.mmtbackend.pojo.domain.po.interviewReview.GroupByNumPo">
        select is_message as id, count(id) as num
        from interview_status
        where admission_id = #{admissionId, jdbcType=INTEGER}
          and round = #{round,jdbcType=INTEGER}
          and true_end_time is not null
          and state = #{state,jdbcType=INTEGER}
          and is_message != 1
        group by is_message
        order by is_message
    </select>


</mapper>